                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (Mac OS X i386)
                              4 ; This file was generated Thu Jun 21 20:48:43 2012
                              5 ;--------------------------------------------------------
                              6 	.module test_adc
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _param_report_period_ms
                             13 	.globl _param_bar_graph
                             14 	.globl _param_input_mode
                             15 	.globl _main
                             16 	.globl _analogInputsInit
                             17 	.globl _sendReportIfNeeded
                             18 	.globl _printBar
                             19 	.globl _updateLeds
                             20 	.globl _printf
                             21 	.globl _usbComTxSend
                             22 	.globl _usbComTxAvailable
                             23 	.globl _usbComService
                             24 	.globl _usbShowStatusWithGreenLed
                             25 	.globl _usbInit
                             26 	.globl _adcConvertToMillivolts
                             27 	.globl _adcSetMillivoltCalibration
                             28 	.globl _adcReadVddMillivolts
                             29 	.globl _adcRead
                             30 	.globl _getMs
                             31 	.globl _boardService
                             32 	.globl _systemInit
                             33 	.globl _report
                             34 	.globl _printBar_PARM_2
                             35 	.globl _reportBytesSent
                             36 	.globl _reportLength
                             37 	.globl _putchar
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 	.area RSEG    (ABS,DATA)
   0000                      42 	.org 0x0000
                    0080     43 Ftest_adc$P0$0$0 == 0x0080
                    0080     44 _P0	=	0x0080
                    0081     45 Ftest_adc$SP$0$0 == 0x0081
                    0081     46 _SP	=	0x0081
                    0082     47 Ftest_adc$DPL0$0$0 == 0x0082
                    0082     48 _DPL0	=	0x0082
                    0083     49 Ftest_adc$DPH0$0$0 == 0x0083
                    0083     50 _DPH0	=	0x0083
                    0084     51 Ftest_adc$DPL1$0$0 == 0x0084
                    0084     52 _DPL1	=	0x0084
                    0085     53 Ftest_adc$DPH1$0$0 == 0x0085
                    0085     54 _DPH1	=	0x0085
                    0086     55 Ftest_adc$U0CSR$0$0 == 0x0086
                    0086     56 _U0CSR	=	0x0086
                    0087     57 Ftest_adc$PCON$0$0 == 0x0087
                    0087     58 _PCON	=	0x0087
                    0088     59 Ftest_adc$TCON$0$0 == 0x0088
                    0088     60 _TCON	=	0x0088
                    0089     61 Ftest_adc$P0IFG$0$0 == 0x0089
                    0089     62 _P0IFG	=	0x0089
                    008A     63 Ftest_adc$P1IFG$0$0 == 0x008a
                    008A     64 _P1IFG	=	0x008a
                    008B     65 Ftest_adc$P2IFG$0$0 == 0x008b
                    008B     66 _P2IFG	=	0x008b
                    008C     67 Ftest_adc$PICTL$0$0 == 0x008c
                    008C     68 _PICTL	=	0x008c
                    008D     69 Ftest_adc$P1IEN$0$0 == 0x008d
                    008D     70 _P1IEN	=	0x008d
                    008F     71 Ftest_adc$P0INP$0$0 == 0x008f
                    008F     72 _P0INP	=	0x008f
                    0090     73 Ftest_adc$P1$0$0 == 0x0090
                    0090     74 _P1	=	0x0090
                    0091     75 Ftest_adc$RFIM$0$0 == 0x0091
                    0091     76 _RFIM	=	0x0091
                    0092     77 Ftest_adc$DPS$0$0 == 0x0092
                    0092     78 _DPS	=	0x0092
                    0093     79 Ftest_adc$MPAGE$0$0 == 0x0093
                    0093     80 _MPAGE	=	0x0093
                    0095     81 Ftest_adc$ENDIAN$0$0 == 0x0095
                    0095     82 _ENDIAN	=	0x0095
                    0098     83 Ftest_adc$S0CON$0$0 == 0x0098
                    0098     84 _S0CON	=	0x0098
                    009A     85 Ftest_adc$IEN2$0$0 == 0x009a
                    009A     86 _IEN2	=	0x009a
                    009B     87 Ftest_adc$S1CON$0$0 == 0x009b
                    009B     88 _S1CON	=	0x009b
                    009C     89 Ftest_adc$T2CT$0$0 == 0x009c
                    009C     90 _T2CT	=	0x009c
                    009D     91 Ftest_adc$T2PR$0$0 == 0x009d
                    009D     92 _T2PR	=	0x009d
                    009E     93 Ftest_adc$T2CTL$0$0 == 0x009e
                    009E     94 _T2CTL	=	0x009e
                    00A0     95 Ftest_adc$P2$0$0 == 0x00a0
                    00A0     96 _P2	=	0x00a0
                    00A1     97 Ftest_adc$WORIRQ$0$0 == 0x00a1
                    00A1     98 _WORIRQ	=	0x00a1
                    00A2     99 Ftest_adc$WORCTRL$0$0 == 0x00a2
                    00A2    100 _WORCTRL	=	0x00a2
                    00A3    101 Ftest_adc$WOREVT0$0$0 == 0x00a3
                    00A3    102 _WOREVT0	=	0x00a3
                    00A4    103 Ftest_adc$WOREVT1$0$0 == 0x00a4
                    00A4    104 _WOREVT1	=	0x00a4
                    00A5    105 Ftest_adc$WORTIME0$0$0 == 0x00a5
                    00A5    106 _WORTIME0	=	0x00a5
                    00A6    107 Ftest_adc$WORTIME1$0$0 == 0x00a6
                    00A6    108 _WORTIME1	=	0x00a6
                    00A8    109 Ftest_adc$IEN0$0$0 == 0x00a8
                    00A8    110 _IEN0	=	0x00a8
                    00A9    111 Ftest_adc$IP0$0$0 == 0x00a9
                    00A9    112 _IP0	=	0x00a9
                    00AB    113 Ftest_adc$FWT$0$0 == 0x00ab
                    00AB    114 _FWT	=	0x00ab
                    00AC    115 Ftest_adc$FADDRL$0$0 == 0x00ac
                    00AC    116 _FADDRL	=	0x00ac
                    00AD    117 Ftest_adc$FADDRH$0$0 == 0x00ad
                    00AD    118 _FADDRH	=	0x00ad
                    00AE    119 Ftest_adc$FCTL$0$0 == 0x00ae
                    00AE    120 _FCTL	=	0x00ae
                    00AF    121 Ftest_adc$FWDATA$0$0 == 0x00af
                    00AF    122 _FWDATA	=	0x00af
                    00B1    123 Ftest_adc$ENCDI$0$0 == 0x00b1
                    00B1    124 _ENCDI	=	0x00b1
                    00B2    125 Ftest_adc$ENCDO$0$0 == 0x00b2
                    00B2    126 _ENCDO	=	0x00b2
                    00B3    127 Ftest_adc$ENCCS$0$0 == 0x00b3
                    00B3    128 _ENCCS	=	0x00b3
                    00B4    129 Ftest_adc$ADCCON1$0$0 == 0x00b4
                    00B4    130 _ADCCON1	=	0x00b4
                    00B5    131 Ftest_adc$ADCCON2$0$0 == 0x00b5
                    00B5    132 _ADCCON2	=	0x00b5
                    00B6    133 Ftest_adc$ADCCON3$0$0 == 0x00b6
                    00B6    134 _ADCCON3	=	0x00b6
                    00B8    135 Ftest_adc$IEN1$0$0 == 0x00b8
                    00B8    136 _IEN1	=	0x00b8
                    00B9    137 Ftest_adc$IP1$0$0 == 0x00b9
                    00B9    138 _IP1	=	0x00b9
                    00BA    139 Ftest_adc$ADCL$0$0 == 0x00ba
                    00BA    140 _ADCL	=	0x00ba
                    00BB    141 Ftest_adc$ADCH$0$0 == 0x00bb
                    00BB    142 _ADCH	=	0x00bb
                    00BC    143 Ftest_adc$RNDL$0$0 == 0x00bc
                    00BC    144 _RNDL	=	0x00bc
                    00BD    145 Ftest_adc$RNDH$0$0 == 0x00bd
                    00BD    146 _RNDH	=	0x00bd
                    00BE    147 Ftest_adc$SLEEP$0$0 == 0x00be
                    00BE    148 _SLEEP	=	0x00be
                    00C0    149 Ftest_adc$IRCON$0$0 == 0x00c0
                    00C0    150 _IRCON	=	0x00c0
                    00C1    151 Ftest_adc$U0DBUF$0$0 == 0x00c1
                    00C1    152 _U0DBUF	=	0x00c1
                    00C2    153 Ftest_adc$U0BAUD$0$0 == 0x00c2
                    00C2    154 _U0BAUD	=	0x00c2
                    00C4    155 Ftest_adc$U0UCR$0$0 == 0x00c4
                    00C4    156 _U0UCR	=	0x00c4
                    00C5    157 Ftest_adc$U0GCR$0$0 == 0x00c5
                    00C5    158 _U0GCR	=	0x00c5
                    00C6    159 Ftest_adc$CLKCON$0$0 == 0x00c6
                    00C6    160 _CLKCON	=	0x00c6
                    00C7    161 Ftest_adc$MEMCTR$0$0 == 0x00c7
                    00C7    162 _MEMCTR	=	0x00c7
                    00C9    163 Ftest_adc$WDCTL$0$0 == 0x00c9
                    00C9    164 _WDCTL	=	0x00c9
                    00CA    165 Ftest_adc$T3CNT$0$0 == 0x00ca
                    00CA    166 _T3CNT	=	0x00ca
                    00CB    167 Ftest_adc$T3CTL$0$0 == 0x00cb
                    00CB    168 _T3CTL	=	0x00cb
                    00CC    169 Ftest_adc$T3CCTL0$0$0 == 0x00cc
                    00CC    170 _T3CCTL0	=	0x00cc
                    00CD    171 Ftest_adc$T3CC0$0$0 == 0x00cd
                    00CD    172 _T3CC0	=	0x00cd
                    00CE    173 Ftest_adc$T3CCTL1$0$0 == 0x00ce
                    00CE    174 _T3CCTL1	=	0x00ce
                    00CF    175 Ftest_adc$T3CC1$0$0 == 0x00cf
                    00CF    176 _T3CC1	=	0x00cf
                    00D0    177 Ftest_adc$PSW$0$0 == 0x00d0
                    00D0    178 _PSW	=	0x00d0
                    00D1    179 Ftest_adc$DMAIRQ$0$0 == 0x00d1
                    00D1    180 _DMAIRQ	=	0x00d1
                    00D2    181 Ftest_adc$DMA1CFGL$0$0 == 0x00d2
                    00D2    182 _DMA1CFGL	=	0x00d2
                    00D3    183 Ftest_adc$DMA1CFGH$0$0 == 0x00d3
                    00D3    184 _DMA1CFGH	=	0x00d3
                    00D4    185 Ftest_adc$DMA0CFGL$0$0 == 0x00d4
                    00D4    186 _DMA0CFGL	=	0x00d4
                    00D5    187 Ftest_adc$DMA0CFGH$0$0 == 0x00d5
                    00D5    188 _DMA0CFGH	=	0x00d5
                    00D6    189 Ftest_adc$DMAARM$0$0 == 0x00d6
                    00D6    190 _DMAARM	=	0x00d6
                    00D7    191 Ftest_adc$DMAREQ$0$0 == 0x00d7
                    00D7    192 _DMAREQ	=	0x00d7
                    00D8    193 Ftest_adc$TIMIF$0$0 == 0x00d8
                    00D8    194 _TIMIF	=	0x00d8
                    00D9    195 Ftest_adc$RFD$0$0 == 0x00d9
                    00D9    196 _RFD	=	0x00d9
                    00DA    197 Ftest_adc$T1CC0L$0$0 == 0x00da
                    00DA    198 _T1CC0L	=	0x00da
                    00DB    199 Ftest_adc$T1CC0H$0$0 == 0x00db
                    00DB    200 _T1CC0H	=	0x00db
                    00DC    201 Ftest_adc$T1CC1L$0$0 == 0x00dc
                    00DC    202 _T1CC1L	=	0x00dc
                    00DD    203 Ftest_adc$T1CC1H$0$0 == 0x00dd
                    00DD    204 _T1CC1H	=	0x00dd
                    00DE    205 Ftest_adc$T1CC2L$0$0 == 0x00de
                    00DE    206 _T1CC2L	=	0x00de
                    00DF    207 Ftest_adc$T1CC2H$0$0 == 0x00df
                    00DF    208 _T1CC2H	=	0x00df
                    00E0    209 Ftest_adc$ACC$0$0 == 0x00e0
                    00E0    210 _ACC	=	0x00e0
                    00E1    211 Ftest_adc$RFST$0$0 == 0x00e1
                    00E1    212 _RFST	=	0x00e1
                    00E2    213 Ftest_adc$T1CNTL$0$0 == 0x00e2
                    00E2    214 _T1CNTL	=	0x00e2
                    00E3    215 Ftest_adc$T1CNTH$0$0 == 0x00e3
                    00E3    216 _T1CNTH	=	0x00e3
                    00E4    217 Ftest_adc$T1CTL$0$0 == 0x00e4
                    00E4    218 _T1CTL	=	0x00e4
                    00E5    219 Ftest_adc$T1CCTL0$0$0 == 0x00e5
                    00E5    220 _T1CCTL0	=	0x00e5
                    00E6    221 Ftest_adc$T1CCTL1$0$0 == 0x00e6
                    00E6    222 _T1CCTL1	=	0x00e6
                    00E7    223 Ftest_adc$T1CCTL2$0$0 == 0x00e7
                    00E7    224 _T1CCTL2	=	0x00e7
                    00E8    225 Ftest_adc$IRCON2$0$0 == 0x00e8
                    00E8    226 _IRCON2	=	0x00e8
                    00E9    227 Ftest_adc$RFIF$0$0 == 0x00e9
                    00E9    228 _RFIF	=	0x00e9
                    00EA    229 Ftest_adc$T4CNT$0$0 == 0x00ea
                    00EA    230 _T4CNT	=	0x00ea
                    00EB    231 Ftest_adc$T4CTL$0$0 == 0x00eb
                    00EB    232 _T4CTL	=	0x00eb
                    00EC    233 Ftest_adc$T4CCTL0$0$0 == 0x00ec
                    00EC    234 _T4CCTL0	=	0x00ec
                    00ED    235 Ftest_adc$T4CC0$0$0 == 0x00ed
                    00ED    236 _T4CC0	=	0x00ed
                    00EE    237 Ftest_adc$T4CCTL1$0$0 == 0x00ee
                    00EE    238 _T4CCTL1	=	0x00ee
                    00EF    239 Ftest_adc$T4CC1$0$0 == 0x00ef
                    00EF    240 _T4CC1	=	0x00ef
                    00F0    241 Ftest_adc$B$0$0 == 0x00f0
                    00F0    242 _B	=	0x00f0
                    00F1    243 Ftest_adc$PERCFG$0$0 == 0x00f1
                    00F1    244 _PERCFG	=	0x00f1
                    00F2    245 Ftest_adc$ADCCFG$0$0 == 0x00f2
                    00F2    246 _ADCCFG	=	0x00f2
                    00F3    247 Ftest_adc$P0SEL$0$0 == 0x00f3
                    00F3    248 _P0SEL	=	0x00f3
                    00F4    249 Ftest_adc$P1SEL$0$0 == 0x00f4
                    00F4    250 _P1SEL	=	0x00f4
                    00F5    251 Ftest_adc$P2SEL$0$0 == 0x00f5
                    00F5    252 _P2SEL	=	0x00f5
                    00F6    253 Ftest_adc$P1INP$0$0 == 0x00f6
                    00F6    254 _P1INP	=	0x00f6
                    00F7    255 Ftest_adc$P2INP$0$0 == 0x00f7
                    00F7    256 _P2INP	=	0x00f7
                    00F8    257 Ftest_adc$U1CSR$0$0 == 0x00f8
                    00F8    258 _U1CSR	=	0x00f8
                    00F9    259 Ftest_adc$U1DBUF$0$0 == 0x00f9
                    00F9    260 _U1DBUF	=	0x00f9
                    00FA    261 Ftest_adc$U1BAUD$0$0 == 0x00fa
                    00FA    262 _U1BAUD	=	0x00fa
                    00FB    263 Ftest_adc$U1UCR$0$0 == 0x00fb
                    00FB    264 _U1UCR	=	0x00fb
                    00FC    265 Ftest_adc$U1GCR$0$0 == 0x00fc
                    00FC    266 _U1GCR	=	0x00fc
                    00FD    267 Ftest_adc$P0DIR$0$0 == 0x00fd
                    00FD    268 _P0DIR	=	0x00fd
                    00FE    269 Ftest_adc$P1DIR$0$0 == 0x00fe
                    00FE    270 _P1DIR	=	0x00fe
                    00FF    271 Ftest_adc$P2DIR$0$0 == 0x00ff
                    00FF    272 _P2DIR	=	0x00ff
                    FFFFD5D4    273 Ftest_adc$DMA0CFG$0$0 == 0xffffd5d4
                    FFFFD5D4    274 _DMA0CFG	=	0xffffd5d4
                    FFFFD3D2    275 Ftest_adc$DMA1CFG$0$0 == 0xffffd3d2
                    FFFFD3D2    276 _DMA1CFG	=	0xffffd3d2
                    FFFFADAC    277 Ftest_adc$FADDR$0$0 == 0xffffadac
                    FFFFADAC    278 _FADDR	=	0xffffadac
                    FFFFBBBA    279 Ftest_adc$ADC$0$0 == 0xffffbbba
                    FFFFBBBA    280 _ADC	=	0xffffbbba
                    FFFFDBDA    281 Ftest_adc$T1CC0$0$0 == 0xffffdbda
                    FFFFDBDA    282 _T1CC0	=	0xffffdbda
                    FFFFDDDC    283 Ftest_adc$T1CC1$0$0 == 0xffffdddc
                    FFFFDDDC    284 _T1CC1	=	0xffffdddc
                    FFFFDFDE    285 Ftest_adc$T1CC2$0$0 == 0xffffdfde
                    FFFFDFDE    286 _T1CC2	=	0xffffdfde
                            287 ;--------------------------------------------------------
                            288 ; special function bits
                            289 ;--------------------------------------------------------
                            290 	.area RSEG    (ABS,DATA)
   0000                     291 	.org 0x0000
                    0080    292 Ftest_adc$P0_0$0$0 == 0x0080
                    0080    293 _P0_0	=	0x0080
                    0081    294 Ftest_adc$P0_1$0$0 == 0x0081
                    0081    295 _P0_1	=	0x0081
                    0082    296 Ftest_adc$P0_2$0$0 == 0x0082
                    0082    297 _P0_2	=	0x0082
                    0083    298 Ftest_adc$P0_3$0$0 == 0x0083
                    0083    299 _P0_3	=	0x0083
                    0084    300 Ftest_adc$P0_4$0$0 == 0x0084
                    0084    301 _P0_4	=	0x0084
                    0085    302 Ftest_adc$P0_5$0$0 == 0x0085
                    0085    303 _P0_5	=	0x0085
                    0086    304 Ftest_adc$P0_6$0$0 == 0x0086
                    0086    305 _P0_6	=	0x0086
                    0087    306 Ftest_adc$P0_7$0$0 == 0x0087
                    0087    307 _P0_7	=	0x0087
                    0088    308 Ftest_adc$_TCON_0$0$0 == 0x0088
                    0088    309 __TCON_0	=	0x0088
                    0089    310 Ftest_adc$RFTXRXIF$0$0 == 0x0089
                    0089    311 _RFTXRXIF	=	0x0089
                    008A    312 Ftest_adc$_TCON_2$0$0 == 0x008a
                    008A    313 __TCON_2	=	0x008a
                    008B    314 Ftest_adc$URX0IF$0$0 == 0x008b
                    008B    315 _URX0IF	=	0x008b
                    008C    316 Ftest_adc$_TCON_4$0$0 == 0x008c
                    008C    317 __TCON_4	=	0x008c
                    008D    318 Ftest_adc$ADCIF$0$0 == 0x008d
                    008D    319 _ADCIF	=	0x008d
                    008E    320 Ftest_adc$_TCON_6$0$0 == 0x008e
                    008E    321 __TCON_6	=	0x008e
                    008F    322 Ftest_adc$URX1IF$0$0 == 0x008f
                    008F    323 _URX1IF	=	0x008f
                    0090    324 Ftest_adc$P1_0$0$0 == 0x0090
                    0090    325 _P1_0	=	0x0090
                    0091    326 Ftest_adc$P1_1$0$0 == 0x0091
                    0091    327 _P1_1	=	0x0091
                    0092    328 Ftest_adc$P1_2$0$0 == 0x0092
                    0092    329 _P1_2	=	0x0092
                    0093    330 Ftest_adc$P1_3$0$0 == 0x0093
                    0093    331 _P1_3	=	0x0093
                    0094    332 Ftest_adc$P1_4$0$0 == 0x0094
                    0094    333 _P1_4	=	0x0094
                    0095    334 Ftest_adc$P1_5$0$0 == 0x0095
                    0095    335 _P1_5	=	0x0095
                    0096    336 Ftest_adc$P1_6$0$0 == 0x0096
                    0096    337 _P1_6	=	0x0096
                    0097    338 Ftest_adc$P1_7$0$0 == 0x0097
                    0097    339 _P1_7	=	0x0097
                    0098    340 Ftest_adc$ENCIF_0$0$0 == 0x0098
                    0098    341 _ENCIF_0	=	0x0098
                    0099    342 Ftest_adc$ENCIF_1$0$0 == 0x0099
                    0099    343 _ENCIF_1	=	0x0099
                    009A    344 Ftest_adc$_SOCON2$0$0 == 0x009a
                    009A    345 __SOCON2	=	0x009a
                    009B    346 Ftest_adc$_SOCON3$0$0 == 0x009b
                    009B    347 __SOCON3	=	0x009b
                    009C    348 Ftest_adc$_SOCON4$0$0 == 0x009c
                    009C    349 __SOCON4	=	0x009c
                    009D    350 Ftest_adc$_SOCON5$0$0 == 0x009d
                    009D    351 __SOCON5	=	0x009d
                    009E    352 Ftest_adc$_SOCON6$0$0 == 0x009e
                    009E    353 __SOCON6	=	0x009e
                    009F    354 Ftest_adc$_SOCON7$0$0 == 0x009f
                    009F    355 __SOCON7	=	0x009f
                    00A0    356 Ftest_adc$P2_0$0$0 == 0x00a0
                    00A0    357 _P2_0	=	0x00a0
                    00A1    358 Ftest_adc$P2_1$0$0 == 0x00a1
                    00A1    359 _P2_1	=	0x00a1
                    00A2    360 Ftest_adc$P2_2$0$0 == 0x00a2
                    00A2    361 _P2_2	=	0x00a2
                    00A3    362 Ftest_adc$P2_3$0$0 == 0x00a3
                    00A3    363 _P2_3	=	0x00a3
                    00A4    364 Ftest_adc$P2_4$0$0 == 0x00a4
                    00A4    365 _P2_4	=	0x00a4
                    00A5    366 Ftest_adc$P2_5$0$0 == 0x00a5
                    00A5    367 _P2_5	=	0x00a5
                    00A6    368 Ftest_adc$P2_6$0$0 == 0x00a6
                    00A6    369 _P2_6	=	0x00a6
                    00A7    370 Ftest_adc$P2_7$0$0 == 0x00a7
                    00A7    371 _P2_7	=	0x00a7
                    00A8    372 Ftest_adc$RFTXRXIE$0$0 == 0x00a8
                    00A8    373 _RFTXRXIE	=	0x00a8
                    00A9    374 Ftest_adc$ADCIE$0$0 == 0x00a9
                    00A9    375 _ADCIE	=	0x00a9
                    00AA    376 Ftest_adc$URX0IE$0$0 == 0x00aa
                    00AA    377 _URX0IE	=	0x00aa
                    00AB    378 Ftest_adc$URX1IE$0$0 == 0x00ab
                    00AB    379 _URX1IE	=	0x00ab
                    00AC    380 Ftest_adc$ENCIE$0$0 == 0x00ac
                    00AC    381 _ENCIE	=	0x00ac
                    00AD    382 Ftest_adc$STIE$0$0 == 0x00ad
                    00AD    383 _STIE	=	0x00ad
                    00AE    384 Ftest_adc$_IEN06$0$0 == 0x00ae
                    00AE    385 __IEN06	=	0x00ae
                    00AF    386 Ftest_adc$EA$0$0 == 0x00af
                    00AF    387 _EA	=	0x00af
                    00B8    388 Ftest_adc$DMAIE$0$0 == 0x00b8
                    00B8    389 _DMAIE	=	0x00b8
                    00B9    390 Ftest_adc$T1IE$0$0 == 0x00b9
                    00B9    391 _T1IE	=	0x00b9
                    00BA    392 Ftest_adc$T2IE$0$0 == 0x00ba
                    00BA    393 _T2IE	=	0x00ba
                    00BB    394 Ftest_adc$T3IE$0$0 == 0x00bb
                    00BB    395 _T3IE	=	0x00bb
                    00BC    396 Ftest_adc$T4IE$0$0 == 0x00bc
                    00BC    397 _T4IE	=	0x00bc
                    00BD    398 Ftest_adc$P0IE$0$0 == 0x00bd
                    00BD    399 _P0IE	=	0x00bd
                    00BE    400 Ftest_adc$_IEN16$0$0 == 0x00be
                    00BE    401 __IEN16	=	0x00be
                    00BF    402 Ftest_adc$_IEN17$0$0 == 0x00bf
                    00BF    403 __IEN17	=	0x00bf
                    00C0    404 Ftest_adc$DMAIF$0$0 == 0x00c0
                    00C0    405 _DMAIF	=	0x00c0
                    00C1    406 Ftest_adc$T1IF$0$0 == 0x00c1
                    00C1    407 _T1IF	=	0x00c1
                    00C2    408 Ftest_adc$T2IF$0$0 == 0x00c2
                    00C2    409 _T2IF	=	0x00c2
                    00C3    410 Ftest_adc$T3IF$0$0 == 0x00c3
                    00C3    411 _T3IF	=	0x00c3
                    00C4    412 Ftest_adc$T4IF$0$0 == 0x00c4
                    00C4    413 _T4IF	=	0x00c4
                    00C5    414 Ftest_adc$P0IF$0$0 == 0x00c5
                    00C5    415 _P0IF	=	0x00c5
                    00C6    416 Ftest_adc$_IRCON6$0$0 == 0x00c6
                    00C6    417 __IRCON6	=	0x00c6
                    00C7    418 Ftest_adc$STIF$0$0 == 0x00c7
                    00C7    419 _STIF	=	0x00c7
                    00D0    420 Ftest_adc$P$0$0 == 0x00d0
                    00D0    421 _P	=	0x00d0
                    00D1    422 Ftest_adc$F1$0$0 == 0x00d1
                    00D1    423 _F1	=	0x00d1
                    00D2    424 Ftest_adc$OV$0$0 == 0x00d2
                    00D2    425 _OV	=	0x00d2
                    00D3    426 Ftest_adc$RS0$0$0 == 0x00d3
                    00D3    427 _RS0	=	0x00d3
                    00D4    428 Ftest_adc$RS1$0$0 == 0x00d4
                    00D4    429 _RS1	=	0x00d4
                    00D5    430 Ftest_adc$F0$0$0 == 0x00d5
                    00D5    431 _F0	=	0x00d5
                    00D6    432 Ftest_adc$AC$0$0 == 0x00d6
                    00D6    433 _AC	=	0x00d6
                    00D7    434 Ftest_adc$CY$0$0 == 0x00d7
                    00D7    435 _CY	=	0x00d7
                    00D8    436 Ftest_adc$T3OVFIF$0$0 == 0x00d8
                    00D8    437 _T3OVFIF	=	0x00d8
                    00D9    438 Ftest_adc$T3CH0IF$0$0 == 0x00d9
                    00D9    439 _T3CH0IF	=	0x00d9
                    00DA    440 Ftest_adc$T3CH1IF$0$0 == 0x00da
                    00DA    441 _T3CH1IF	=	0x00da
                    00DB    442 Ftest_adc$T4OVFIF$0$0 == 0x00db
                    00DB    443 _T4OVFIF	=	0x00db
                    00DC    444 Ftest_adc$T4CH0IF$0$0 == 0x00dc
                    00DC    445 _T4CH0IF	=	0x00dc
                    00DD    446 Ftest_adc$T4CH1IF$0$0 == 0x00dd
                    00DD    447 _T4CH1IF	=	0x00dd
                    00DE    448 Ftest_adc$OVFIM$0$0 == 0x00de
                    00DE    449 _OVFIM	=	0x00de
                    00DF    450 Ftest_adc$_TIMIF7$0$0 == 0x00df
                    00DF    451 __TIMIF7	=	0x00df
                    00E0    452 Ftest_adc$ACC_0$0$0 == 0x00e0
                    00E0    453 _ACC_0	=	0x00e0
                    00E1    454 Ftest_adc$ACC_1$0$0 == 0x00e1
                    00E1    455 _ACC_1	=	0x00e1
                    00E2    456 Ftest_adc$ACC_2$0$0 == 0x00e2
                    00E2    457 _ACC_2	=	0x00e2
                    00E3    458 Ftest_adc$ACC_3$0$0 == 0x00e3
                    00E3    459 _ACC_3	=	0x00e3
                    00E4    460 Ftest_adc$ACC_4$0$0 == 0x00e4
                    00E4    461 _ACC_4	=	0x00e4
                    00E5    462 Ftest_adc$ACC_5$0$0 == 0x00e5
                    00E5    463 _ACC_5	=	0x00e5
                    00E6    464 Ftest_adc$ACC_6$0$0 == 0x00e6
                    00E6    465 _ACC_6	=	0x00e6
                    00E7    466 Ftest_adc$ACC_7$0$0 == 0x00e7
                    00E7    467 _ACC_7	=	0x00e7
                    00E8    468 Ftest_adc$P2IF$0$0 == 0x00e8
                    00E8    469 _P2IF	=	0x00e8
                    00E9    470 Ftest_adc$UTX0IF$0$0 == 0x00e9
                    00E9    471 _UTX0IF	=	0x00e9
                    00EA    472 Ftest_adc$UTX1IF$0$0 == 0x00ea
                    00EA    473 _UTX1IF	=	0x00ea
                    00EB    474 Ftest_adc$P1IF$0$0 == 0x00eb
                    00EB    475 _P1IF	=	0x00eb
                    00EC    476 Ftest_adc$WDTIF$0$0 == 0x00ec
                    00EC    477 _WDTIF	=	0x00ec
                    00ED    478 Ftest_adc$_IRCON25$0$0 == 0x00ed
                    00ED    479 __IRCON25	=	0x00ed
                    00EE    480 Ftest_adc$_IRCON26$0$0 == 0x00ee
                    00EE    481 __IRCON26	=	0x00ee
                    00EF    482 Ftest_adc$_IRCON27$0$0 == 0x00ef
                    00EF    483 __IRCON27	=	0x00ef
                    00F0    484 Ftest_adc$B_0$0$0 == 0x00f0
                    00F0    485 _B_0	=	0x00f0
                    00F1    486 Ftest_adc$B_1$0$0 == 0x00f1
                    00F1    487 _B_1	=	0x00f1
                    00F2    488 Ftest_adc$B_2$0$0 == 0x00f2
                    00F2    489 _B_2	=	0x00f2
                    00F3    490 Ftest_adc$B_3$0$0 == 0x00f3
                    00F3    491 _B_3	=	0x00f3
                    00F4    492 Ftest_adc$B_4$0$0 == 0x00f4
                    00F4    493 _B_4	=	0x00f4
                    00F5    494 Ftest_adc$B_5$0$0 == 0x00f5
                    00F5    495 _B_5	=	0x00f5
                    00F6    496 Ftest_adc$B_6$0$0 == 0x00f6
                    00F6    497 _B_6	=	0x00f6
                    00F7    498 Ftest_adc$B_7$0$0 == 0x00f7
                    00F7    499 _B_7	=	0x00f7
                    00F8    500 Ftest_adc$U1ACTIVE$0$0 == 0x00f8
                    00F8    501 _U1ACTIVE	=	0x00f8
                    00F9    502 Ftest_adc$U1TX_BYTE$0$0 == 0x00f9
                    00F9    503 _U1TX_BYTE	=	0x00f9
                    00FA    504 Ftest_adc$U1RX_BYTE$0$0 == 0x00fa
                    00FA    505 _U1RX_BYTE	=	0x00fa
                    00FB    506 Ftest_adc$U1ERR$0$0 == 0x00fb
                    00FB    507 _U1ERR	=	0x00fb
                    00FC    508 Ftest_adc$U1FE$0$0 == 0x00fc
                    00FC    509 _U1FE	=	0x00fc
                    00FD    510 Ftest_adc$U1SLAVE$0$0 == 0x00fd
                    00FD    511 _U1SLAVE	=	0x00fd
                    00FE    512 Ftest_adc$U1RE$0$0 == 0x00fe
                    00FE    513 _U1RE	=	0x00fe
                    00FF    514 Ftest_adc$U1MODE$0$0 == 0x00ff
                    00FF    515 _U1MODE	=	0x00ff
                            516 ;--------------------------------------------------------
                            517 ; overlayable register banks
                            518 ;--------------------------------------------------------
                            519 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     520 	.ds 8
                            521 ;--------------------------------------------------------
                            522 ; internal ram data
                            523 ;--------------------------------------------------------
                            524 	.area DSEG    (DATA)
                    0000    525 G$reportLength$0$0==.
   0000                     526 _reportLength::
   0000                     527 	.ds 2
                    0002    528 G$reportBytesSent$0$0==.
   0002                     529 _reportBytesSent::
   0002                     530 	.ds 2
                    0004    531 Ltest_adc.sendReportIfNeeded$sloc0$1$0==.
   0004                     532 _sendReportIfNeeded_sloc0_1_0:
   0004                     533 	.ds 4
                    0008    534 Ltest_adc.sendReportIfNeeded$sloc1$1$0==.
   0008                     535 _sendReportIfNeeded_sloc1_1_0:
   0008                     536 	.ds 2
                    000A    537 Ltest_adc.sendReportIfNeeded$sloc2$1$0==.
   000A                     538 _sendReportIfNeeded_sloc2_1_0:
   000A                     539 	.ds 2
                            540 ;--------------------------------------------------------
                            541 ; overlayable items in internal ram 
                            542 ;--------------------------------------------------------
                            543 	.area OSEG    (OVR,DATA)
                            544 ;--------------------------------------------------------
                            545 ; Stack segment in internal ram 
                            546 ;--------------------------------------------------------
                            547 	.area	SSEG	(DATA)
   0000                     548 __start__stack:
   0000                     549 	.ds	1
                            550 
                            551 ;--------------------------------------------------------
                            552 ; indirectly addressable internal ram data
                            553 ;--------------------------------------------------------
                            554 	.area ISEG    (DATA)
                            555 ;--------------------------------------------------------
                            556 ; absolute internal ram data
                            557 ;--------------------------------------------------------
                            558 	.area IABS    (ABS,DATA)
                            559 	.area IABS    (ABS,DATA)
                            560 ;--------------------------------------------------------
                            561 ; bit data
                            562 ;--------------------------------------------------------
                            563 	.area BSEG    (BIT)
                            564 ;--------------------------------------------------------
                            565 ; paged external ram data
                            566 ;--------------------------------------------------------
                            567 	.area PSEG    (PAG,XDATA)
                    0000    568 Ltest_adc.printBar$adcResult$1$1==.
   0000                     569 _printBar_PARM_2:
   0000                     570 	.ds 2
                    0002    571 Ltest_adc.sendReportIfNeeded$lastReport$1$1==.
   0002                     572 _sendReportIfNeeded_lastReport_1_1:
   0002                     573 	.ds 4
                    0006    574 Ltest_adc.sendReportIfNeeded$result$1$1==.
   0006                     575 _sendReportIfNeeded_result_1_1:
   0006                     576 	.ds 12
                    0012    577 Ltest_adc.sendReportIfNeeded$vddMillivolts$1$1==.
   0012                     578 _sendReportIfNeeded_vddMillivolts_1_1:
   0012                     579 	.ds 2
                            580 ;--------------------------------------------------------
                            581 ; external ram data
                            582 ;--------------------------------------------------------
                            583 	.area XSEG    (XDATA)
                    DF00    584 Ftest_adc$SYNC1$0$0 == 0xdf00
                    DF00    585 _SYNC1	=	0xdf00
                    DF01    586 Ftest_adc$SYNC0$0$0 == 0xdf01
                    DF01    587 _SYNC0	=	0xdf01
                    DF02    588 Ftest_adc$PKTLEN$0$0 == 0xdf02
                    DF02    589 _PKTLEN	=	0xdf02
                    DF03    590 Ftest_adc$PKTCTRL1$0$0 == 0xdf03
                    DF03    591 _PKTCTRL1	=	0xdf03
                    DF04    592 Ftest_adc$PKTCTRL0$0$0 == 0xdf04
                    DF04    593 _PKTCTRL0	=	0xdf04
                    DF05    594 Ftest_adc$ADDR$0$0 == 0xdf05
                    DF05    595 _ADDR	=	0xdf05
                    DF06    596 Ftest_adc$CHANNR$0$0 == 0xdf06
                    DF06    597 _CHANNR	=	0xdf06
                    DF07    598 Ftest_adc$FSCTRL1$0$0 == 0xdf07
                    DF07    599 _FSCTRL1	=	0xdf07
                    DF08    600 Ftest_adc$FSCTRL0$0$0 == 0xdf08
                    DF08    601 _FSCTRL0	=	0xdf08
                    DF09    602 Ftest_adc$FREQ2$0$0 == 0xdf09
                    DF09    603 _FREQ2	=	0xdf09
                    DF0A    604 Ftest_adc$FREQ1$0$0 == 0xdf0a
                    DF0A    605 _FREQ1	=	0xdf0a
                    DF0B    606 Ftest_adc$FREQ0$0$0 == 0xdf0b
                    DF0B    607 _FREQ0	=	0xdf0b
                    DF0C    608 Ftest_adc$MDMCFG4$0$0 == 0xdf0c
                    DF0C    609 _MDMCFG4	=	0xdf0c
                    DF0D    610 Ftest_adc$MDMCFG3$0$0 == 0xdf0d
                    DF0D    611 _MDMCFG3	=	0xdf0d
                    DF0E    612 Ftest_adc$MDMCFG2$0$0 == 0xdf0e
                    DF0E    613 _MDMCFG2	=	0xdf0e
                    DF0F    614 Ftest_adc$MDMCFG1$0$0 == 0xdf0f
                    DF0F    615 _MDMCFG1	=	0xdf0f
                    DF10    616 Ftest_adc$MDMCFG0$0$0 == 0xdf10
                    DF10    617 _MDMCFG0	=	0xdf10
                    DF11    618 Ftest_adc$DEVIATN$0$0 == 0xdf11
                    DF11    619 _DEVIATN	=	0xdf11
                    DF12    620 Ftest_adc$MCSM2$0$0 == 0xdf12
                    DF12    621 _MCSM2	=	0xdf12
                    DF13    622 Ftest_adc$MCSM1$0$0 == 0xdf13
                    DF13    623 _MCSM1	=	0xdf13
                    DF14    624 Ftest_adc$MCSM0$0$0 == 0xdf14
                    DF14    625 _MCSM0	=	0xdf14
                    DF15    626 Ftest_adc$FOCCFG$0$0 == 0xdf15
                    DF15    627 _FOCCFG	=	0xdf15
                    DF16    628 Ftest_adc$BSCFG$0$0 == 0xdf16
                    DF16    629 _BSCFG	=	0xdf16
                    DF17    630 Ftest_adc$AGCCTRL2$0$0 == 0xdf17
                    DF17    631 _AGCCTRL2	=	0xdf17
                    DF18    632 Ftest_adc$AGCCTRL1$0$0 == 0xdf18
                    DF18    633 _AGCCTRL1	=	0xdf18
                    DF19    634 Ftest_adc$AGCCTRL0$0$0 == 0xdf19
                    DF19    635 _AGCCTRL0	=	0xdf19
                    DF1A    636 Ftest_adc$FREND1$0$0 == 0xdf1a
                    DF1A    637 _FREND1	=	0xdf1a
                    DF1B    638 Ftest_adc$FREND0$0$0 == 0xdf1b
                    DF1B    639 _FREND0	=	0xdf1b
                    DF1C    640 Ftest_adc$FSCAL3$0$0 == 0xdf1c
                    DF1C    641 _FSCAL3	=	0xdf1c
                    DF1D    642 Ftest_adc$FSCAL2$0$0 == 0xdf1d
                    DF1D    643 _FSCAL2	=	0xdf1d
                    DF1E    644 Ftest_adc$FSCAL1$0$0 == 0xdf1e
                    DF1E    645 _FSCAL1	=	0xdf1e
                    DF1F    646 Ftest_adc$FSCAL0$0$0 == 0xdf1f
                    DF1F    647 _FSCAL0	=	0xdf1f
                    DF23    648 Ftest_adc$TEST2$0$0 == 0xdf23
                    DF23    649 _TEST2	=	0xdf23
                    DF24    650 Ftest_adc$TEST1$0$0 == 0xdf24
                    DF24    651 _TEST1	=	0xdf24
                    DF25    652 Ftest_adc$TEST0$0$0 == 0xdf25
                    DF25    653 _TEST0	=	0xdf25
                    DF2E    654 Ftest_adc$PA_TABLE0$0$0 == 0xdf2e
                    DF2E    655 _PA_TABLE0	=	0xdf2e
                    DF2F    656 Ftest_adc$IOCFG2$0$0 == 0xdf2f
                    DF2F    657 _IOCFG2	=	0xdf2f
                    DF30    658 Ftest_adc$IOCFG1$0$0 == 0xdf30
                    DF30    659 _IOCFG1	=	0xdf30
                    DF31    660 Ftest_adc$IOCFG0$0$0 == 0xdf31
                    DF31    661 _IOCFG0	=	0xdf31
                    DF36    662 Ftest_adc$PARTNUM$0$0 == 0xdf36
                    DF36    663 _PARTNUM	=	0xdf36
                    DF37    664 Ftest_adc$VERSION$0$0 == 0xdf37
                    DF37    665 _VERSION	=	0xdf37
                    DF38    666 Ftest_adc$FREQEST$0$0 == 0xdf38
                    DF38    667 _FREQEST	=	0xdf38
                    DF39    668 Ftest_adc$LQI$0$0 == 0xdf39
                    DF39    669 _LQI	=	0xdf39
                    DF3A    670 Ftest_adc$RSSI$0$0 == 0xdf3a
                    DF3A    671 _RSSI	=	0xdf3a
                    DF3B    672 Ftest_adc$MARCSTATE$0$0 == 0xdf3b
                    DF3B    673 _MARCSTATE	=	0xdf3b
                    DF3C    674 Ftest_adc$PKTSTATUS$0$0 == 0xdf3c
                    DF3C    675 _PKTSTATUS	=	0xdf3c
                    DF3D    676 Ftest_adc$VCO_VC_DAC$0$0 == 0xdf3d
                    DF3D    677 _VCO_VC_DAC	=	0xdf3d
                    DF40    678 Ftest_adc$I2SCFG0$0$0 == 0xdf40
                    DF40    679 _I2SCFG0	=	0xdf40
                    DF41    680 Ftest_adc$I2SCFG1$0$0 == 0xdf41
                    DF41    681 _I2SCFG1	=	0xdf41
                    DF42    682 Ftest_adc$I2SDATL$0$0 == 0xdf42
                    DF42    683 _I2SDATL	=	0xdf42
                    DF43    684 Ftest_adc$I2SDATH$0$0 == 0xdf43
                    DF43    685 _I2SDATH	=	0xdf43
                    DF44    686 Ftest_adc$I2SWCNT$0$0 == 0xdf44
                    DF44    687 _I2SWCNT	=	0xdf44
                    DF45    688 Ftest_adc$I2SSTAT$0$0 == 0xdf45
                    DF45    689 _I2SSTAT	=	0xdf45
                    DF46    690 Ftest_adc$I2SCLKF0$0$0 == 0xdf46
                    DF46    691 _I2SCLKF0	=	0xdf46
                    DF47    692 Ftest_adc$I2SCLKF1$0$0 == 0xdf47
                    DF47    693 _I2SCLKF1	=	0xdf47
                    DF48    694 Ftest_adc$I2SCLKF2$0$0 == 0xdf48
                    DF48    695 _I2SCLKF2	=	0xdf48
                    DE00    696 Ftest_adc$USBADDR$0$0 == 0xde00
                    DE00    697 _USBADDR	=	0xde00
                    DE01    698 Ftest_adc$USBPOW$0$0 == 0xde01
                    DE01    699 _USBPOW	=	0xde01
                    DE02    700 Ftest_adc$USBIIF$0$0 == 0xde02
                    DE02    701 _USBIIF	=	0xde02
                    DE04    702 Ftest_adc$USBOIF$0$0 == 0xde04
                    DE04    703 _USBOIF	=	0xde04
                    DE06    704 Ftest_adc$USBCIF$0$0 == 0xde06
                    DE06    705 _USBCIF	=	0xde06
                    DE07    706 Ftest_adc$USBIIE$0$0 == 0xde07
                    DE07    707 _USBIIE	=	0xde07
                    DE09    708 Ftest_adc$USBOIE$0$0 == 0xde09
                    DE09    709 _USBOIE	=	0xde09
                    DE0B    710 Ftest_adc$USBCIE$0$0 == 0xde0b
                    DE0B    711 _USBCIE	=	0xde0b
                    DE0C    712 Ftest_adc$USBFRML$0$0 == 0xde0c
                    DE0C    713 _USBFRML	=	0xde0c
                    DE0D    714 Ftest_adc$USBFRMH$0$0 == 0xde0d
                    DE0D    715 _USBFRMH	=	0xde0d
                    DE0E    716 Ftest_adc$USBINDEX$0$0 == 0xde0e
                    DE0E    717 _USBINDEX	=	0xde0e
                    DE10    718 Ftest_adc$USBMAXI$0$0 == 0xde10
                    DE10    719 _USBMAXI	=	0xde10
                    DE11    720 Ftest_adc$USBCSIL$0$0 == 0xde11
                    DE11    721 _USBCSIL	=	0xde11
                    DE12    722 Ftest_adc$USBCSIH$0$0 == 0xde12
                    DE12    723 _USBCSIH	=	0xde12
                    DE13    724 Ftest_adc$USBMAXO$0$0 == 0xde13
                    DE13    725 _USBMAXO	=	0xde13
                    DE14    726 Ftest_adc$USBCSOL$0$0 == 0xde14
                    DE14    727 _USBCSOL	=	0xde14
                    DE15    728 Ftest_adc$USBCSOH$0$0 == 0xde15
                    DE15    729 _USBCSOH	=	0xde15
                    DE16    730 Ftest_adc$USBCNTL$0$0 == 0xde16
                    DE16    731 _USBCNTL	=	0xde16
                    DE17    732 Ftest_adc$USBCNTH$0$0 == 0xde17
                    DE17    733 _USBCNTH	=	0xde17
                    DE20    734 Ftest_adc$USBF0$0$0 == 0xde20
                    DE20    735 _USBF0	=	0xde20
                    DE22    736 Ftest_adc$USBF1$0$0 == 0xde22
                    DE22    737 _USBF1	=	0xde22
                    DE24    738 Ftest_adc$USBF2$0$0 == 0xde24
                    DE24    739 _USBF2	=	0xde24
                    DE26    740 Ftest_adc$USBF3$0$0 == 0xde26
                    DE26    741 _USBF3	=	0xde26
                    DE28    742 Ftest_adc$USBF4$0$0 == 0xde28
                    DE28    743 _USBF4	=	0xde28
                    DE2A    744 Ftest_adc$USBF5$0$0 == 0xde2a
                    DE2A    745 _USBF5	=	0xde2a
                    0000    746 G$report$0$0==.
   0000                     747 _report::
   0000                     748 	.ds 1024
                            749 ;--------------------------------------------------------
                            750 ; absolute external ram data
                            751 ;--------------------------------------------------------
                            752 	.area XABS    (ABS,XDATA)
                            753 ;--------------------------------------------------------
                            754 ; external initialized ram data
                            755 ;--------------------------------------------------------
                            756 	.area XISEG   (XDATA)
                            757 	.area HOME    (CODE)
                            758 	.area GSINIT0 (CODE)
                            759 	.area GSINIT1 (CODE)
                            760 	.area GSINIT2 (CODE)
                            761 	.area GSINIT3 (CODE)
                            762 	.area GSINIT4 (CODE)
                            763 	.area GSINIT5 (CODE)
                            764 	.area GSINIT  (CODE)
                            765 	.area GSFINAL (CODE)
                            766 	.area CSEG    (CODE)
                            767 ;--------------------------------------------------------
                            768 ; interrupt vector 
                            769 ;--------------------------------------------------------
                            770 	.area HOME    (CODE)
   0000                     771 __interrupt_vect:
   0000 02s00r00            772 	ljmp	__sdcc_gsinit_startup
   0003 32                  773 	reti
   0004                     774 	.ds	7
   000B 32                  775 	reti
   000C                     776 	.ds	7
   0013 32                  777 	reti
   0014                     778 	.ds	7
   001B 32                  779 	reti
   001C                     780 	.ds	7
   0023 32                  781 	reti
   0024                     782 	.ds	7
   002B 32                  783 	reti
   002C                     784 	.ds	7
   0033 32                  785 	reti
   0034                     786 	.ds	7
   003B 32                  787 	reti
   003C                     788 	.ds	7
   0043 32                  789 	reti
   0044                     790 	.ds	7
   004B 32                  791 	reti
   004C                     792 	.ds	7
   0053 32                  793 	reti
   0054                     794 	.ds	7
   005B 32                  795 	reti
   005C                     796 	.ds	7
   0063 02s00r00            797 	ljmp	_ISR_T4
                            798 ;--------------------------------------------------------
                            799 ; global & static initialisations
                            800 ;--------------------------------------------------------
                            801 	.area HOME    (CODE)
                            802 	.area GSINIT  (CODE)
                            803 	.area GSFINAL (CODE)
                            804 	.area GSINIT  (CODE)
                            805 	.globl __sdcc_gsinit_startup
                            806 	.globl __sdcc_program_startup
                            807 	.globl __start__stack
                            808 	.globl __mcs51_genXINIT
                            809 	.globl __mcs51_genXRAMCLEAR
                            810 	.globl __mcs51_genRAMCLEAR
                    0000    811 	G$main$0$0 ==.
                    0000    812 	C$test_adc.c$45$1$1 ==.
                            813 ;	apps/test_adc/test_adc.c:45: uint16 DATA reportLength = 0;
   0000 E4                  814 	clr	a
   0001 F5*00               815 	mov	_reportLength,a
   0003 F5*01               816 	mov	(_reportLength + 1),a
                    0005    817 	G$main$0$0 ==.
                    0005    818 	C$test_adc.c$49$1$1 ==.
                            819 ;	apps/test_adc/test_adc.c:49: uint16 DATA reportBytesSent = 0;
   0005 E4                  820 	clr	a
   0006 F5*02               821 	mov	_reportBytesSent,a
   0008 F5*03               822 	mov	(_reportBytesSent + 1),a
                            823 	.area GSFINAL (CODE)
   0000 02s00r66            824 	ljmp	__sdcc_program_startup
                            825 ;--------------------------------------------------------
                            826 ; Home
                            827 ;--------------------------------------------------------
                            828 	.area HOME    (CODE)
                            829 	.area HOME    (CODE)
   0066                     830 __sdcc_program_startup:
   0066 12s03rAD            831 	lcall	_main
                            832 ;	return from main will lock up
   0069 80 FE               833 	sjmp .
                            834 ;--------------------------------------------------------
                            835 ; code
                            836 ;--------------------------------------------------------
                            837 	.area CSEG    (CODE)
                            838 ;------------------------------------------------------------
                            839 ;Allocation info for local variables in function 'updateLeds'
                            840 ;------------------------------------------------------------
                    0000    841 	G$updateLeds$0$0 ==.
                    0000    842 	C$test_adc.c$53$0$0 ==.
                            843 ;	apps/test_adc/test_adc.c:53: void updateLeds()
                            844 ;	-----------------------------------------
                            845 ;	 function updateLeds
                            846 ;	-----------------------------------------
   0000                     847 _updateLeds:
                    0007    848 	ar7 = 0x07
                    0006    849 	ar6 = 0x06
                    0005    850 	ar5 = 0x05
                    0004    851 	ar4 = 0x04
                    0003    852 	ar3 = 0x03
                    0002    853 	ar2 = 0x02
                    0001    854 	ar1 = 0x01
                    0000    855 	ar0 = 0x00
                    0000    856 	C$test_adc.c$55$1$1 ==.
                            857 ;	apps/test_adc/test_adc.c:55: usbShowStatusWithGreenLed();
   0000 12s00r00            858 	lcall	_usbShowStatusWithGreenLed
                    0003    859 	C$test_adc.c$56$2$2 ==.
                            860 ;	apps/test_adc/test_adc.c:56: LED_YELLOW(0);
   0003 AF FF               861 	mov	r7,_P2DIR
   0005 53 07 FB            862 	anl	ar7,#0xFB
   0008 8F FF               863 	mov	_P2DIR,r7
                    000A    864 	C$test_adc.c$57$2$3 ==.
                            865 ;	apps/test_adc/test_adc.c:57: LED_RED(0);
   000A AF FF               866 	mov	r7,_P2DIR
   000C 53 07 FD            867 	anl	ar7,#0xFD
   000F 8F FF               868 	mov	_P2DIR,r7
                    0011    869 	C$test_adc.c$58$2$3 ==.
                    0011    870 	XG$updateLeds$0$0 ==.
   0011 22                  871 	ret
                            872 ;------------------------------------------------------------
                            873 ;Allocation info for local variables in function 'putchar'
                            874 ;------------------------------------------------------------
                    0012    875 	G$putchar$0$0 ==.
                    0012    876 	C$test_adc.c$62$2$3 ==.
                            877 ;	apps/test_adc/test_adc.c:62: void putchar(char c)
                            878 ;	-----------------------------------------
                            879 ;	 function putchar
                            880 ;	-----------------------------------------
   0012                     881 _putchar:
   0012 AF 82               882 	mov	r7,dpl
                    0014    883 	C$test_adc.c$64$1$1 ==.
                            884 ;	apps/test_adc/test_adc.c:64: report[reportLength] = c;
   0014 E5*00               885 	mov	a,_reportLength
   0016 24r00               886 	add	a,#_report
   0018 F5 82               887 	mov	dpl,a
   001A E5*01               888 	mov	a,(_reportLength + 1)
   001C 34s00               889 	addc	a,#(_report >> 8)
   001E F5 83               890 	mov	dph,a
   0020 EF                  891 	mov	a,r7
   0021 F0                  892 	movx	@dptr,a
                    0022    893 	C$test_adc.c$65$1$1 ==.
                            894 ;	apps/test_adc/test_adc.c:65: reportLength++;
   0022 05*00               895 	inc	_reportLength
   0024 E4                  896 	clr	a
   0025 B5*00 02            897 	cjne	a,_reportLength,00103$
   0028 05*01               898 	inc	(_reportLength + 1)
   002A                     899 00103$:
                    002A    900 	C$test_adc.c$66$1$1 ==.
                    002A    901 	XG$putchar$0$0 ==.
   002A 22                  902 	ret
                            903 ;------------------------------------------------------------
                            904 ;Allocation info for local variables in function 'printBar'
                            905 ;------------------------------------------------------------
                    002B    906 	G$printBar$0$0 ==.
                    002B    907 	C$test_adc.c$69$1$1 ==.
                            908 ;	apps/test_adc/test_adc.c:69: void printBar(const char * name, uint16 adcResult)
                            909 ;	-----------------------------------------
                            910 ;	 function printBar
                            911 ;	-----------------------------------------
   002B                     912 _printBar:
   002B AD 82               913 	mov	r5,dpl
   002D AE 83               914 	mov	r6,dph
   002F AF F0               915 	mov	r7,b
                    0031    916 	C$test_adc.c$72$1$1 ==.
                            917 ;	apps/test_adc/test_adc.c:72: printf("%-4s %4d mV |", name, adcConvertToMillivolts(adcResult));
   0031 78r00               918 	mov	r0,#_printBar_PARM_2
   0033 E2                  919 	movx	a,@r0
   0034 F5 82               920 	mov	dpl,a
   0036 08                  921 	inc	r0
   0037 E2                  922 	movx	a,@r0
   0038 F5 83               923 	mov	dph,a
   003A C0 07               924 	push	ar7
   003C C0 06               925 	push	ar6
   003E C0 05               926 	push	ar5
   0040 12s00r00            927 	lcall	_adcConvertToMillivolts
   0043 AB 82               928 	mov	r3,dpl
   0045 AC 83               929 	mov	r4,dph
   0047 D0 05               930 	pop	ar5
   0049 D0 06               931 	pop	ar6
   004B D0 07               932 	pop	ar7
   004D C0 03               933 	push	ar3
   004F C0 04               934 	push	ar4
   0051 C0 05               935 	push	ar5
   0053 C0 06               936 	push	ar6
   0055 C0 07               937 	push	ar7
   0057 74r0C               938 	mov	a,#__str_0
   0059 C0 E0               939 	push	acc
   005B 74s00               940 	mov	a,#(__str_0 >> 8)
   005D C0 E0               941 	push	acc
   005F 74 80               942 	mov	a,#0x80
   0061 C0 E0               943 	push	acc
   0063 12s00r00            944 	lcall	_printf
   0066 E5 81               945 	mov	a,sp
   0068 24 F8               946 	add	a,#0xf8
   006A F5 81               947 	mov	sp,a
                    006C    948 	C$test_adc.c$73$1$1 ==.
                            949 ;	apps/test_adc/test_adc.c:73: width = adcResult >> 5;
   006C 78r00               950 	mov	r0,#_printBar_PARM_2
   006E E2                  951 	movx	a,@r0
   006F FE                  952 	mov	r6,a
   0070 08                  953 	inc	r0
   0071 E2                  954 	movx	a,@r0
   0072 C4                  955 	swap	a
   0073 03                  956 	rr	a
   0074 CE                  957 	xch	a,r6
   0075 C4                  958 	swap	a
   0076 03                  959 	rr	a
   0077 54 07               960 	anl	a,#0x07
   0079 6E                  961 	xrl	a,r6
   007A CE                  962 	xch	a,r6
   007B 54 07               963 	anl	a,#0x07
   007D CE                  964 	xch	a,r6
   007E 6E                  965 	xrl	a,r6
   007F CE                  966 	xch	a,r6
                    0080    967 	C$test_adc.c$74$1$1 ==.
                            968 ;	apps/test_adc/test_adc.c:74: for(i = 0; i < width; i++){ putchar('#'); }
   0080 7F 00               969 	mov	r7,#0x00
   0082                     970 00101$:
   0082 C3                  971 	clr	c
   0083 EF                  972 	mov	a,r7
   0084 9E                  973 	subb	a,r6
   0085 50 11               974 	jnc	00114$
   0087 75 82 23            975 	mov	dpl,#0x23
   008A C0 07               976 	push	ar7
   008C C0 06               977 	push	ar6
   008E 12s00r12            978 	lcall	_putchar
   0091 D0 06               979 	pop	ar6
   0093 D0 07               980 	pop	ar7
   0095 0F                  981 	inc	r7
   0096 80 EA               982 	sjmp	00101$
   0098                     983 00114$:
   0098                     984 00105$:
                    0098    985 	C$test_adc.c$75$1$1 ==.
                            986 ;	apps/test_adc/test_adc.c:75: for(; i < 63; i++){ putchar(' '); }
   0098 BF 3F 00            987 	cjne	r7,#0x3F,00118$
   009B                     988 00118$:
   009B 50 0D               989 	jnc	00108$
   009D 75 82 20            990 	mov	dpl,#0x20
   00A0 C0 07               991 	push	ar7
   00A2 12s00r12            992 	lcall	_putchar
   00A5 D0 07               993 	pop	ar7
   00A7 0F                  994 	inc	r7
   00A8 80 EE               995 	sjmp	00105$
   00AA                     996 00108$:
                    00AA    997 	C$test_adc.c$76$1$1 ==.
                            998 ;	apps/test_adc/test_adc.c:76: putchar('|');
   00AA 75 82 7C            999 	mov	dpl,#0x7C
   00AD 12s00r12           1000 	lcall	_putchar
                    00B0   1001 	C$test_adc.c$77$1$1 ==.
                           1002 ;	apps/test_adc/test_adc.c:77: putchar('\r');
   00B0 75 82 0D           1003 	mov	dpl,#0x0D
   00B3 12s00r12           1004 	lcall	_putchar
                    00B6   1005 	C$test_adc.c$78$1$1 ==.
                           1006 ;	apps/test_adc/test_adc.c:78: putchar('\n');
   00B6 75 82 0A           1007 	mov	dpl,#0x0A
   00B9 12s00r12           1008 	lcall	_putchar
                    00BC   1009 	C$test_adc.c$79$1$1 ==.
                    00BC   1010 	XG$printBar$0$0 ==.
   00BC 22                 1011 	ret
                           1012 ;------------------------------------------------------------
                           1013 ;Allocation info for local variables in function 'sendReportIfNeeded'
                           1014 ;------------------------------------------------------------
                           1015 ;sloc0                     Allocated with name '_sendReportIfNeeded_sloc0_1_0'
                           1016 ;sloc1                     Allocated with name '_sendReportIfNeeded_sloc1_1_0'
                           1017 ;sloc2                     Allocated with name '_sendReportIfNeeded_sloc2_1_0'
                           1018 ;------------------------------------------------------------
                    00BD   1019 	G$sendReportIfNeeded$0$0 ==.
                    00BD   1020 	C$test_adc.c$81$1$1 ==.
                           1021 ;	apps/test_adc/test_adc.c:81: void sendReportIfNeeded()
                           1022 ;	-----------------------------------------
                           1023 ;	 function sendReportIfNeeded
                           1024 ;	-----------------------------------------
   00BD                    1025 _sendReportIfNeeded:
                    00BD   1026 	C$test_adc.c$89$1$1 ==.
                           1027 ;	apps/test_adc/test_adc.c:89: if (getMs() - lastReport >= param_report_period_ms && reportLength == 0)
   00BD 12s00r00           1028 	lcall	_getMs
   00C0 AC 82              1029 	mov	r4,dpl
   00C2 AD 83              1030 	mov	r5,dph
   00C4 AE F0              1031 	mov	r6,b
   00C6 FF                 1032 	mov	r7,a
   00C7 78r02              1033 	mov	r0,#_sendReportIfNeeded_lastReport_1_1
   00C9 D3                 1034 	setb	c
   00CA E2                 1035 	movx	a,@r0
   00CB 9C                 1036 	subb	a,r4
   00CC F4                 1037 	cpl	a
   00CD B3                 1038 	cpl	c
   00CE F5*04              1039 	mov	_sendReportIfNeeded_sloc0_1_0,a
   00D0 B3                 1040 	cpl	c
   00D1 08                 1041 	inc	r0
   00D2 E2                 1042 	movx	a,@r0
   00D3 9D                 1043 	subb	a,r5
   00D4 F4                 1044 	cpl	a
   00D5 B3                 1045 	cpl	c
   00D6 F5*05              1046 	mov	(_sendReportIfNeeded_sloc0_1_0 + 1),a
   00D8 B3                 1047 	cpl	c
   00D9 08                 1048 	inc	r0
   00DA E2                 1049 	movx	a,@r0
   00DB 9E                 1050 	subb	a,r6
   00DC F4                 1051 	cpl	a
   00DD B3                 1052 	cpl	c
   00DE F5*06              1053 	mov	(_sendReportIfNeeded_sloc0_1_0 + 2),a
   00E0 B3                 1054 	cpl	c
   00E1 08                 1055 	inc	r0
   00E2 E2                 1056 	movx	a,@r0
   00E3 9F                 1057 	subb	a,r7
   00E4 F4                 1058 	cpl	a
   00E5 F5*07              1059 	mov	(_sendReportIfNeeded_sloc0_1_0 + 3),a
   00E7 90s00r08           1060 	mov	dptr,#_param_report_period_ms
   00EA E4                 1061 	clr	a
   00EB 93                 1062 	movc	a,@a+dptr
   00EC FA                 1063 	mov	r2,a
   00ED 74 01              1064 	mov	a,#0x01
   00EF 93                 1065 	movc	a,@a+dptr
   00F0 FB                 1066 	mov	r3,a
   00F1 74 02              1067 	mov	a,#0x02
   00F3 93                 1068 	movc	a,@a+dptr
   00F4 FE                 1069 	mov	r6,a
   00F5 74 03              1070 	mov	a,#0x03
   00F7 93                 1071 	movc	a,@a+dptr
   00F8 FF                 1072 	mov	r7,a
   00F9 C3                 1073 	clr	c
   00FA E5*04              1074 	mov	a,_sendReportIfNeeded_sloc0_1_0
   00FC 9A                 1075 	subb	a,r2
   00FD E5*05              1076 	mov	a,(_sendReportIfNeeded_sloc0_1_0 + 1)
   00FF 9B                 1077 	subb	a,r3
   0100 E5*06              1078 	mov	a,(_sendReportIfNeeded_sloc0_1_0 + 2)
   0102 9E                 1079 	subb	a,r6
   0103 E5*07              1080 	mov	a,(_sendReportIfNeeded_sloc0_1_0 + 3)
   0105 9F                 1081 	subb	a,r7
   0106 50 03              1082 	jnc	00126$
   0108 02s03r02           1083 	ljmp	00105$
   010B                    1084 00126$:
   010B E5*00              1085 	mov	a,_reportLength
   010D 45*01              1086 	orl	a,(_reportLength + 1)
   010F 60 03              1087 	jz	00127$
   0111 02s03r02           1088 	ljmp	00105$
   0114                    1089 00127$:
                    0114   1090 	C$test_adc.c$91$2$2 ==.
                           1091 ;	apps/test_adc/test_adc.c:91: lastReport = getMs();
   0114 12s00r00           1092 	lcall	_getMs
   0117 AC 82              1093 	mov	r4,dpl
   0119 AD 83              1094 	mov	r5,dph
   011B AE F0              1095 	mov	r6,b
   011D FF                 1096 	mov	r7,a
   011E 78r02              1097 	mov	r0,#_sendReportIfNeeded_lastReport_1_1
   0120 EC                 1098 	mov	a,r4
   0121 F2                 1099 	movx	@r0,a
   0122 08                 1100 	inc	r0
   0123 ED                 1101 	mov	a,r5
   0124 F2                 1102 	movx	@r0,a
   0125 08                 1103 	inc	r0
   0126 EE                 1104 	mov	a,r6
   0127 F2                 1105 	movx	@r0,a
   0128 08                 1106 	inc	r0
   0129 EF                 1107 	mov	a,r7
   012A F2                 1108 	movx	@r0,a
                    012B   1109 	C$test_adc.c$92$2$2 ==.
                           1110 ;	apps/test_adc/test_adc.c:92: reportBytesSent = 0;
   012B E4                 1111 	clr	a
   012C F5*02              1112 	mov	_reportBytesSent,a
   012E F5*03              1113 	mov	(_reportBytesSent + 1),a
                    0130   1114 	C$test_adc.c$94$2$2 ==.
                           1115 ;	apps/test_adc/test_adc.c:94: vddMillivolts = adcReadVddMillivolts();
   0130 12s00r00           1116 	lcall	_adcReadVddMillivolts
   0133 78r12              1117 	mov	r0,#_sendReportIfNeeded_vddMillivolts_1_1
   0135 E5 82              1118 	mov	a,dpl
   0137 F2                 1119 	movx	@r0,a
   0138 08                 1120 	inc	r0
   0139 E5 83              1121 	mov	a,dph
   013B F2                 1122 	movx	@r0,a
                    013C   1123 	C$test_adc.c$95$2$2 ==.
                           1124 ;	apps/test_adc/test_adc.c:95: adcSetMillivoltCalibration(vddMillivolts);
   013C 78r12              1125 	mov	r0,#_sendReportIfNeeded_vddMillivolts_1_1
   013E E2                 1126 	movx	a,@r0
   013F F5 82              1127 	mov	dpl,a
   0141 08                 1128 	inc	r0
   0142 E2                 1129 	movx	a,@r0
   0143 F5 83              1130 	mov	dph,a
   0145 12s00r00           1131 	lcall	_adcSetMillivoltCalibration
                    0148   1132 	C$test_adc.c$97$3$3 ==.
                           1133 ;	apps/test_adc/test_adc.c:97: for(i = 0; i < 6; i++)
   0148 7D 00              1134 	mov	r5,#0x00
   014A                    1135 00112$:
   014A BD 06 00           1136 	cjne	r5,#0x06,00128$
   014D                    1137 00128$:
   014D 50 20              1138 	jnc	00115$
                    014F   1139 	C$test_adc.c$99$3$3 ==.
                           1140 ;	apps/test_adc/test_adc.c:99: result[i] = adcRead(i);
   014F ED                 1141 	mov	a,r5
   0150 2D                 1142 	add	a,r5
   0151 24r06              1143 	add	a,#_sendReportIfNeeded_result_1_1
   0153 F9                 1144 	mov	r1,a
   0154 8D 82              1145 	mov	dpl,r5
   0156 C0 05              1146 	push	ar5
   0158 C0 01              1147 	push	ar1
   015A 12s00r00           1148 	lcall	_adcRead
   015D E5 82              1149 	mov	a,dpl
   015F 85 83 F0           1150 	mov	b,dph
   0162 D0 01              1151 	pop	ar1
   0164 D0 05              1152 	pop	ar5
   0166 F3                 1153 	movx	@r1,a
   0167 09                 1154 	inc	r1
   0168 E5 F0              1155 	mov	a,b
   016A F3                 1156 	movx	@r1,a
   016B 19                 1157 	dec	r1
                    016C   1158 	C$test_adc.c$97$2$2 ==.
                           1159 ;	apps/test_adc/test_adc.c:97: for(i = 0; i < 6; i++)
   016C 0D                 1160 	inc	r5
   016D 80 DB              1161 	sjmp	00112$
   016F                    1162 00115$:
                    016F   1163 	C$test_adc.c$102$2$2 ==.
                           1164 ;	apps/test_adc/test_adc.c:102: if (param_bar_graph)
   016F 90s00r04           1165 	mov	dptr,#_param_bar_graph
   0172 E4                 1166 	clr	a
   0173 93                 1167 	movc	a,@a+dptr
   0174 FA                 1168 	mov	r2,a
   0175 74 01              1169 	mov	a,#0x01
   0177 93                 1170 	movc	a,@a+dptr
   0178 FB                 1171 	mov	r3,a
   0179 74 02              1172 	mov	a,#0x02
   017B 93                 1173 	movc	a,@a+dptr
   017C FC                 1174 	mov	r4,a
   017D 74 03              1175 	mov	a,#0x03
   017F 93                 1176 	movc	a,@a+dptr
   0180 FD                 1177 	mov	r5,a
   0181 EA                 1178 	mov	a,r2
   0182 4B                 1179 	orl	a,r3
   0183 4C                 1180 	orl	a,r4
   0184 4D                 1181 	orl	a,r5
   0185 70 03              1182 	jnz	00130$
   0187 02s02r4A           1183 	ljmp	00102$
   018A                    1184 00130$:
                    018A   1185 	C$test_adc.c$104$3$4 ==.
                           1186 ;	apps/test_adc/test_adc.c:104: printf("\x1B[0;0H");  // VT100 command for "go to 0,0"
   018A 74r1A              1187 	mov	a,#__str_1
   018C C0 E0              1188 	push	acc
   018E 74s00              1189 	mov	a,#(__str_1 >> 8)
   0190 C0 E0              1190 	push	acc
   0192 74 80              1191 	mov	a,#0x80
   0194 C0 E0              1192 	push	acc
   0196 12s00r00           1193 	lcall	_printf
   0199 15 81              1194 	dec	sp
   019B 15 81              1195 	dec	sp
   019D 15 81              1196 	dec	sp
                    019F   1197 	C$test_adc.c$105$3$4 ==.
                           1198 ;	apps/test_adc/test_adc.c:105: printBar("P0_0", result[0]);
   019F 78r06              1199 	mov	r0,#_sendReportIfNeeded_result_1_1
   01A1 E2                 1200 	movx	a,@r0
   01A2 FC                 1201 	mov	r4,a
   01A3 08                 1202 	inc	r0
   01A4 E2                 1203 	movx	a,@r0
   01A5 FD                 1204 	mov	r5,a
   01A6 78r00              1205 	mov	r0,#_printBar_PARM_2
   01A8 EC                 1206 	mov	a,r4
   01A9 F2                 1207 	movx	@r0,a
   01AA 08                 1208 	inc	r0
   01AB ED                 1209 	mov	a,r5
   01AC F2                 1210 	movx	@r0,a
   01AD 90s00r21           1211 	mov	dptr,#__str_2
   01B0 75 F0 80           1212 	mov	b,#0x80
   01B3 12s00r2B           1213 	lcall	_printBar
                    01B6   1214 	C$test_adc.c$106$3$4 ==.
                           1215 ;	apps/test_adc/test_adc.c:106: printBar("P0_1", result[1]);
   01B6 78r08              1216 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0002)
   01B8 E2                 1217 	movx	a,@r0
   01B9 FC                 1218 	mov	r4,a
   01BA 08                 1219 	inc	r0
   01BB E2                 1220 	movx	a,@r0
   01BC FD                 1221 	mov	r5,a
   01BD 78r00              1222 	mov	r0,#_printBar_PARM_2
   01BF EC                 1223 	mov	a,r4
   01C0 F2                 1224 	movx	@r0,a
   01C1 08                 1225 	inc	r0
   01C2 ED                 1226 	mov	a,r5
   01C3 F2                 1227 	movx	@r0,a
   01C4 90s00r26           1228 	mov	dptr,#__str_3
   01C7 75 F0 80           1229 	mov	b,#0x80
   01CA 12s00r2B           1230 	lcall	_printBar
                    01CD   1231 	C$test_adc.c$107$3$4 ==.
                           1232 ;	apps/test_adc/test_adc.c:107: printBar("P0_2", result[2]);
   01CD 78r0A              1233 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0004)
   01CF E2                 1234 	movx	a,@r0
   01D0 FC                 1235 	mov	r4,a
   01D1 08                 1236 	inc	r0
   01D2 E2                 1237 	movx	a,@r0
   01D3 FD                 1238 	mov	r5,a
   01D4 78r00              1239 	mov	r0,#_printBar_PARM_2
   01D6 EC                 1240 	mov	a,r4
   01D7 F2                 1241 	movx	@r0,a
   01D8 08                 1242 	inc	r0
   01D9 ED                 1243 	mov	a,r5
   01DA F2                 1244 	movx	@r0,a
   01DB 90s00r2B           1245 	mov	dptr,#__str_4
   01DE 75 F0 80           1246 	mov	b,#0x80
   01E1 12s00r2B           1247 	lcall	_printBar
                    01E4   1248 	C$test_adc.c$108$3$4 ==.
                           1249 ;	apps/test_adc/test_adc.c:108: printBar("P0_3", result[3]);
   01E4 78r0C              1250 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0006)
   01E6 E2                 1251 	movx	a,@r0
   01E7 FC                 1252 	mov	r4,a
   01E8 08                 1253 	inc	r0
   01E9 E2                 1254 	movx	a,@r0
   01EA FD                 1255 	mov	r5,a
   01EB 78r00              1256 	mov	r0,#_printBar_PARM_2
   01ED EC                 1257 	mov	a,r4
   01EE F2                 1258 	movx	@r0,a
   01EF 08                 1259 	inc	r0
   01F0 ED                 1260 	mov	a,r5
   01F1 F2                 1261 	movx	@r0,a
   01F2 90s00r30           1262 	mov	dptr,#__str_5
   01F5 75 F0 80           1263 	mov	b,#0x80
   01F8 12s00r2B           1264 	lcall	_printBar
                    01FB   1265 	C$test_adc.c$109$3$4 ==.
                           1266 ;	apps/test_adc/test_adc.c:109: printBar("P0_4", result[4]);
   01FB 78r0E              1267 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0008)
   01FD E2                 1268 	movx	a,@r0
   01FE FC                 1269 	mov	r4,a
   01FF 08                 1270 	inc	r0
   0200 E2                 1271 	movx	a,@r0
   0201 FD                 1272 	mov	r5,a
   0202 78r00              1273 	mov	r0,#_printBar_PARM_2
   0204 EC                 1274 	mov	a,r4
   0205 F2                 1275 	movx	@r0,a
   0206 08                 1276 	inc	r0
   0207 ED                 1277 	mov	a,r5
   0208 F2                 1278 	movx	@r0,a
   0209 90s00r35           1279 	mov	dptr,#__str_6
   020C 75 F0 80           1280 	mov	b,#0x80
   020F 12s00r2B           1281 	lcall	_printBar
                    0212   1282 	C$test_adc.c$110$3$4 ==.
                           1283 ;	apps/test_adc/test_adc.c:110: printBar("P0_5", result[5]);
   0212 78r10              1284 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x000a)
   0214 E2                 1285 	movx	a,@r0
   0215 FC                 1286 	mov	r4,a
   0216 08                 1287 	inc	r0
   0217 E2                 1288 	movx	a,@r0
   0218 FD                 1289 	mov	r5,a
   0219 78r00              1290 	mov	r0,#_printBar_PARM_2
   021B EC                 1291 	mov	a,r4
   021C F2                 1292 	movx	@r0,a
   021D 08                 1293 	inc	r0
   021E ED                 1294 	mov	a,r5
   021F F2                 1295 	movx	@r0,a
   0220 90s00r3A           1296 	mov	dptr,#__str_7
   0223 75 F0 80           1297 	mov	b,#0x80
   0226 12s00r2B           1298 	lcall	_printBar
                    0229   1299 	C$test_adc.c$111$3$4 ==.
                           1300 ;	apps/test_adc/test_adc.c:111: printf("VDD  %4d mV", vddMillivolts);
   0229 78r12              1301 	mov	r0,#_sendReportIfNeeded_vddMillivolts_1_1
   022B E2                 1302 	movx	a,@r0
   022C C0 E0              1303 	push	acc
   022E 08                 1304 	inc	r0
   022F E2                 1305 	movx	a,@r0
   0230 C0 E0              1306 	push	acc
   0232 74r3F              1307 	mov	a,#__str_8
   0234 C0 E0              1308 	push	acc
   0236 74s00              1309 	mov	a,#(__str_8 >> 8)
   0238 C0 E0              1310 	push	acc
   023A 74 80              1311 	mov	a,#0x80
   023C C0 E0              1312 	push	acc
   023E 12s00r00           1313 	lcall	_printf
   0241 E5 81              1314 	mov	a,sp
   0243 24 FB              1315 	add	a,#0xfb
   0245 F5 81              1316 	mov	sp,a
   0247 02s03r02           1317 	ljmp	00105$
   024A                    1318 00102$:
                    024A   1319 	C$test_adc.c$121$3$5 ==.
                           1320 ;	apps/test_adc/test_adc.c:121: adcConvertToMillivolts(result[5]),
   024A 78r10              1321 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x000a)
   024C E2                 1322 	movx	a,@r0
   024D FC                 1323 	mov	r4,a
   024E 08                 1324 	inc	r0
   024F E2                 1325 	movx	a,@r0
   0250 FD                 1326 	mov	r5,a
   0251 8C 82              1327 	mov	dpl,r4
   0253 8D 83              1328 	mov	dph,r5
   0255 12s00r00           1329 	lcall	_adcConvertToMillivolts
   0258 AC 82              1330 	mov	r4,dpl
   025A AD 83              1331 	mov	r5,dph
                    025C   1332 	C$test_adc.c$120$3$5 ==.
                           1333 ;	apps/test_adc/test_adc.c:120: adcConvertToMillivolts(result[4]),
   025C 78r0E              1334 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0008)
   025E E2                 1335 	movx	a,@r0
   025F FA                 1336 	mov	r2,a
   0260 08                 1337 	inc	r0
   0261 E2                 1338 	movx	a,@r0
   0262 FB                 1339 	mov	r3,a
   0263 8A 82              1340 	mov	dpl,r2
   0265 8B 83              1341 	mov	dph,r3
   0267 C0 05              1342 	push	ar5
   0269 C0 04              1343 	push	ar4
   026B 12s00r00           1344 	lcall	_adcConvertToMillivolts
   026E AA 82              1345 	mov	r2,dpl
   0270 AB 83              1346 	mov	r3,dph
                    0272   1347 	C$test_adc.c$119$3$5 ==.
                           1348 ;	apps/test_adc/test_adc.c:119: adcConvertToMillivolts(result[3]),
   0272 78r0C              1349 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0006)
   0274 E2                 1350 	movx	a,@r0
   0275 FE                 1351 	mov	r6,a
   0276 08                 1352 	inc	r0
   0277 E2                 1353 	movx	a,@r0
   0278 FF                 1354 	mov	r7,a
   0279 8E 82              1355 	mov	dpl,r6
   027B 8F 83              1356 	mov	dph,r7
   027D C0 03              1357 	push	ar3
   027F C0 02              1358 	push	ar2
   0281 12s00r00           1359 	lcall	_adcConvertToMillivolts
   0284 85 82*04           1360 	mov	_sendReportIfNeeded_sloc0_1_0,dpl
   0287 85 83*05           1361 	mov	(_sendReportIfNeeded_sloc0_1_0 + 1),dph
                    028A   1362 	C$test_adc.c$118$3$5 ==.
                           1363 ;	apps/test_adc/test_adc.c:118: adcConvertToMillivolts(result[2]),
   028A 78r0A              1364 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0004)
   028C E2                 1365 	movx	a,@r0
   028D FE                 1366 	mov	r6,a
   028E 08                 1367 	inc	r0
   028F E2                 1368 	movx	a,@r0
   0290 FF                 1369 	mov	r7,a
   0291 8E 82              1370 	mov	dpl,r6
   0293 8F 83              1371 	mov	dph,r7
   0295 12s00r00           1372 	lcall	_adcConvertToMillivolts
   0298 85 82*08           1373 	mov	_sendReportIfNeeded_sloc1_1_0,dpl
   029B 85 83*09           1374 	mov	(_sendReportIfNeeded_sloc1_1_0 + 1),dph
                    029E   1375 	C$test_adc.c$117$3$5 ==.
                           1376 ;	apps/test_adc/test_adc.c:117: adcConvertToMillivolts(result[1]),
   029E 78r08              1377 	mov	r0,#(_sendReportIfNeeded_result_1_1 + 0x0002)
   02A0 E2                 1378 	movx	a,@r0
   02A1 FE                 1379 	mov	r6,a
   02A2 08                 1380 	inc	r0
   02A3 E2                 1381 	movx	a,@r0
   02A4 FF                 1382 	mov	r7,a
   02A5 8E 82              1383 	mov	dpl,r6
   02A7 8F 83              1384 	mov	dph,r7
   02A9 12s00r00           1385 	lcall	_adcConvertToMillivolts
   02AC 85 82*0A           1386 	mov	_sendReportIfNeeded_sloc2_1_0,dpl
   02AF 85 83*0B           1387 	mov	(_sendReportIfNeeded_sloc2_1_0 + 1),dph
                    02B2   1388 	C$test_adc.c$116$3$5 ==.
                           1389 ;	apps/test_adc/test_adc.c:116: adcConvertToMillivolts(result[0]),
   02B2 78r06              1390 	mov	r0,#_sendReportIfNeeded_result_1_1
   02B4 E2                 1391 	movx	a,@r0
   02B5 FE                 1392 	mov	r6,a
   02B6 08                 1393 	inc	r0
   02B7 E2                 1394 	movx	a,@r0
   02B8 FF                 1395 	mov	r7,a
   02B9 8E 82              1396 	mov	dpl,r6
   02BB 8F 83              1397 	mov	dph,r7
   02BD 12s00r00           1398 	lcall	_adcConvertToMillivolts
   02C0 AE 82              1399 	mov	r6,dpl
   02C2 AF 83              1400 	mov	r7,dph
   02C4 D0 02              1401 	pop	ar2
   02C6 D0 03              1402 	pop	ar3
   02C8 D0 04              1403 	pop	ar4
   02CA D0 05              1404 	pop	ar5
                    02CC   1405 	C$test_adc.c$115$3$5 ==.
                           1406 ;	apps/test_adc/test_adc.c:115: printf("%4d, %4d, %4d, %4d, %4d, %4d, %4d\r\n",
   02CC 78r12              1407 	mov	r0,#_sendReportIfNeeded_vddMillivolts_1_1
   02CE E2                 1408 	movx	a,@r0
   02CF C0 E0              1409 	push	acc
   02D1 08                 1410 	inc	r0
   02D2 E2                 1411 	movx	a,@r0
   02D3 C0 E0              1412 	push	acc
   02D5 C0 04              1413 	push	ar4
   02D7 C0 05              1414 	push	ar5
   02D9 C0 02              1415 	push	ar2
   02DB C0 03              1416 	push	ar3
   02DD C0*04              1417 	push	_sendReportIfNeeded_sloc0_1_0
   02DF C0*05              1418 	push	(_sendReportIfNeeded_sloc0_1_0 + 1)
   02E1 C0*08              1419 	push	_sendReportIfNeeded_sloc1_1_0
   02E3 C0*09              1420 	push	(_sendReportIfNeeded_sloc1_1_0 + 1)
   02E5 C0*0A              1421 	push	_sendReportIfNeeded_sloc2_1_0
   02E7 C0*0B              1422 	push	(_sendReportIfNeeded_sloc2_1_0 + 1)
   02E9 C0 06              1423 	push	ar6
   02EB C0 07              1424 	push	ar7
   02ED 74r4B              1425 	mov	a,#__str_9
   02EF C0 E0              1426 	push	acc
   02F1 74s00              1427 	mov	a,#(__str_9 >> 8)
   02F3 C0 E0              1428 	push	acc
   02F5 74 80              1429 	mov	a,#0x80
   02F7 C0 E0              1430 	push	acc
   02F9 12s00r00           1431 	lcall	_printf
   02FC E5 81              1432 	mov	a,sp
   02FE 24 EF              1433 	add	a,#0xef
   0300 F5 81              1434 	mov	sp,a
   0302                    1435 00105$:
                    0302   1436 	C$test_adc.c$127$1$1 ==.
                           1437 ;	apps/test_adc/test_adc.c:127: if (reportLength > 0)
   0302 E5*00              1438 	mov	a,_reportLength
   0304 45*01              1439 	orl	a,(_reportLength + 1)
   0306 60 60              1440 	jz	00116$
                    0308   1441 	C$test_adc.c$129$2$6 ==.
                           1442 ;	apps/test_adc/test_adc.c:129: bytesToSend = usbComTxAvailable();
   0308 12s00r00           1443 	lcall	_usbComTxAvailable
   030B AF 82              1444 	mov	r7,dpl
                    030D   1445 	C$test_adc.c$130$2$6 ==.
                           1446 ;	apps/test_adc/test_adc.c:130: if (bytesToSend > reportLength - reportBytesSent)
   030D E5*00              1447 	mov	a,_reportLength
   030F C3                 1448 	clr	c
   0310 95*02              1449 	subb	a,_reportBytesSent
   0312 FD                 1450 	mov	r5,a
   0313 E5*01              1451 	mov	a,(_reportLength + 1)
   0315 95*03              1452 	subb	a,(_reportBytesSent + 1)
   0317 FE                 1453 	mov	r6,a
   0318 8F 03              1454 	mov	ar3,r7
   031A 7C 00              1455 	mov	r4,#0x00
   031C C3                 1456 	clr	c
   031D ED                 1457 	mov	a,r5
   031E 9B                 1458 	subb	a,r3
   031F EE                 1459 	mov	a,r6
   0320 9C                 1460 	subb	a,r4
   0321 50 20              1461 	jnc	00108$
                    0323   1462 	C$test_adc.c$133$3$7 ==.
                           1463 ;	apps/test_adc/test_adc.c:133: usbComTxSend(report+reportBytesSent, reportLength - reportBytesSent);
   0323 E5*02              1464 	mov	a,_reportBytesSent
   0325 24r00              1465 	add	a,#_report
   0327 F5 82              1466 	mov	dpl,a
   0329 E5*03              1467 	mov	a,(_reportBytesSent + 1)
   032B 34s00              1468 	addc	a,#(_report >> 8)
   032D F5 83              1469 	mov	dph,a
   032F AE*00              1470 	mov	r6,_reportLength
   0331 AD*02              1471 	mov	r5,_reportBytesSent
   0333 EE                 1472 	mov	a,r6
   0334 C3                 1473 	clr	c
   0335 9D                 1474 	subb	a,r5
   0336 78r00              1475 	mov	r0,#_usbComTxSend_PARM_2
   0338 F2                 1476 	movx	@r0,a
   0339 12s00r00           1477 	lcall	_usbComTxSend
                    033C   1478 	C$test_adc.c$134$3$7 ==.
                           1479 ;	apps/test_adc/test_adc.c:134: reportLength = 0;
   033C E4                 1480 	clr	a
   033D F5*00              1481 	mov	_reportLength,a
   033F F5*01              1482 	mov	(_reportLength + 1),a
   0341 80 25              1483 	sjmp	00116$
   0343                    1484 00108$:
                    0343   1485 	C$test_adc.c$138$3$8 ==.
                           1486 ;	apps/test_adc/test_adc.c:138: usbComTxSend(report+reportBytesSent, bytesToSend);
   0343 E5*02              1487 	mov	a,_reportBytesSent
   0345 24r00              1488 	add	a,#_report
   0347 F5 82              1489 	mov	dpl,a
   0349 E5*03              1490 	mov	a,(_reportBytesSent + 1)
   034B 34s00              1491 	addc	a,#(_report >> 8)
   034D F5 83              1492 	mov	dph,a
   034F 78r00              1493 	mov	r0,#_usbComTxSend_PARM_2
   0351 EF                 1494 	mov	a,r7
   0352 F2                 1495 	movx	@r0,a
   0353 C0 04              1496 	push	ar4
   0355 C0 03              1497 	push	ar3
   0357 12s00r00           1498 	lcall	_usbComTxSend
   035A D0 03              1499 	pop	ar3
   035C D0 04              1500 	pop	ar4
                    035E   1501 	C$test_adc.c$139$3$8 ==.
                           1502 ;	apps/test_adc/test_adc.c:139: reportBytesSent += bytesToSend;
   035E EB                 1503 	mov	a,r3
   035F 25*02              1504 	add	a,_reportBytesSent
   0361 F5*02              1505 	mov	_reportBytesSent,a
   0363 EC                 1506 	mov	a,r4
   0364 35*03              1507 	addc	a,(_reportBytesSent + 1)
   0366 F5*03              1508 	mov	(_reportBytesSent + 1),a
   0368                    1509 00116$:
                    0368   1510 	C$test_adc.c$143$2$1 ==.
                    0368   1511 	XG$sendReportIfNeeded$0$0 ==.
   0368 22                 1512 	ret
                           1513 ;------------------------------------------------------------
                           1514 ;Allocation info for local variables in function 'analogInputsInit'
                           1515 ;------------------------------------------------------------
                    0369   1516 	G$analogInputsInit$0$0 ==.
                    0369   1517 	C$test_adc.c$145$2$1 ==.
                           1518 ;	apps/test_adc/test_adc.c:145: void analogInputsInit()
                           1519 ;	-----------------------------------------
                           1520 ;	 function analogInputsInit
                           1521 ;	-----------------------------------------
   0369                    1522 _analogInputsInit:
                    0369   1523 	C$test_adc.c$147$1$1 ==.
                           1524 ;	apps/test_adc/test_adc.c:147: switch(param_input_mode)
   0369 90s00r00           1525 	mov	dptr,#_param_input_mode
   036C E4                 1526 	clr	a
   036D 93                 1527 	movc	a,@a+dptr
   036E FC                 1528 	mov	r4,a
   036F 74 01              1529 	mov	a,#0x01
   0371 93                 1530 	movc	a,@a+dptr
   0372 FD                 1531 	mov	r5,a
   0373 74 02              1532 	mov	a,#0x02
   0375 93                 1533 	movc	a,@a+dptr
   0376 FE                 1534 	mov	r6,a
   0377 74 03              1535 	mov	a,#0x03
   0379 93                 1536 	movc	a,@a+dptr
   037A FF                 1537 	mov	r7,a
   037B BC FF 0B           1538 	cjne	r4,#0xFF,00109$
   037E BD FF 08           1539 	cjne	r5,#0xFF,00109$
   0381 BE FF 05           1540 	cjne	r6,#0xFF,00109$
   0384 BF FF 02           1541 	cjne	r7,#0xFF,00109$
   0387 80 18              1542 	sjmp	00102$
   0389                    1543 00109$:
   0389 BC 01 1D           1544 	cjne	r4,#0x01,00103$
   038C BD 00 1A           1545 	cjne	r5,#0x00,00103$
   038F BE 00 17           1546 	cjne	r6,#0x00,00103$
   0392 BF 00 14           1547 	cjne	r7,#0x00,00103$
                    0395   1548 	C$test_adc.c$151$2$2 ==.
                           1549 ;	apps/test_adc/test_adc.c:151: P2INP &= ~(1<<5);  // PDUP0 = 0: Pull-ups on Port 0.
   0395 AF F7              1550 	mov	r7,_P2INP
   0397 53 07 DF           1551 	anl	ar7,#0xDF
   039A 8F F7              1552 	mov	_P2INP,r7
                    039C   1553 	C$test_adc.c$152$2$2 ==.
                           1554 ;	apps/test_adc/test_adc.c:152: P0INP = 0;
   039C 75 8F 00           1555 	mov	_P0INP,#0x00
                    039F   1556 	C$test_adc.c$153$2$2 ==.
                           1557 ;	apps/test_adc/test_adc.c:153: break;
                    039F   1558 	C$test_adc.c$155$2$2 ==.
                           1559 ;	apps/test_adc/test_adc.c:155: case -1: // Enable pull-down resistors for all pins on Port 0.
   039F 80 0B              1560 	sjmp	00105$
   03A1                    1561 00102$:
                    03A1   1562 	C$test_adc.c$156$2$2 ==.
                           1563 ;	apps/test_adc/test_adc.c:156: P2INP |= (1<<5);   // PDUP0 = 1: Pull-downs on Port 0.
   03A1 43 F7 20           1564 	orl	_P2INP,#0x20
                    03A4   1565 	C$test_adc.c$157$2$2 ==.
                           1566 ;	apps/test_adc/test_adc.c:157: P0INP = 0;         // This line should not be necessary because P0SEL is 0 on reset.
   03A4 75 8F 00           1567 	mov	_P0INP,#0x00
                    03A7   1568 	C$test_adc.c$158$2$2 ==.
                           1569 ;	apps/test_adc/test_adc.c:158: break;
                    03A7   1570 	C$test_adc.c$160$2$2 ==.
                           1571 ;	apps/test_adc/test_adc.c:160: default: // Disable pull-ups and pull-downs for all pins on Port 0.
   03A7 80 03              1572 	sjmp	00105$
   03A9                    1573 00103$:
                    03A9   1574 	C$test_adc.c$161$2$2 ==.
                           1575 ;	apps/test_adc/test_adc.c:161: P0INP = 0x3F;
   03A9 75 8F 3F           1576 	mov	_P0INP,#0x3F
                    03AC   1577 	C$test_adc.c$163$1$1 ==.
                           1578 ;	apps/test_adc/test_adc.c:163: }
   03AC                    1579 00105$:
                    03AC   1580 	C$test_adc.c$164$1$1 ==.
                    03AC   1581 	XG$analogInputsInit$0$0 ==.
   03AC 22                 1582 	ret
                           1583 ;------------------------------------------------------------
                           1584 ;Allocation info for local variables in function 'main'
                           1585 ;------------------------------------------------------------
                    03AD   1586 	G$main$0$0 ==.
                    03AD   1587 	C$test_adc.c$166$1$1 ==.
                           1588 ;	apps/test_adc/test_adc.c:166: void main()
                           1589 ;	-----------------------------------------
                           1590 ;	 function main
                           1591 ;	-----------------------------------------
   03AD                    1592 _main:
                    03AD   1593 	C$test_adc.c$168$1$1 ==.
                           1594 ;	apps/test_adc/test_adc.c:168: systemInit();
   03AD 12s00r00           1595 	lcall	_systemInit
                    03B0   1596 	C$test_adc.c$169$1$1 ==.
                           1597 ;	apps/test_adc/test_adc.c:169: usbInit();
   03B0 12s00r00           1598 	lcall	_usbInit
                    03B3   1599 	C$test_adc.c$170$1$1 ==.
                           1600 ;	apps/test_adc/test_adc.c:170: analogInputsInit();
   03B3 12s03r69           1601 	lcall	_analogInputsInit
                    03B6   1602 	C$test_adc.c$172$1$1 ==.
                           1603 ;	apps/test_adc/test_adc.c:172: while(1)
   03B6                    1604 00102$:
                    03B6   1605 	C$test_adc.c$174$2$2 ==.
                           1606 ;	apps/test_adc/test_adc.c:174: boardService();
   03B6 12s00r00           1607 	lcall	_boardService
                    03B9   1608 	C$test_adc.c$175$2$2 ==.
                           1609 ;	apps/test_adc/test_adc.c:175: updateLeds();
   03B9 12s00r00           1610 	lcall	_updateLeds
                    03BC   1611 	C$test_adc.c$176$2$2 ==.
                           1612 ;	apps/test_adc/test_adc.c:176: usbComService();
   03BC 12s00r00           1613 	lcall	_usbComService
                    03BF   1614 	C$test_adc.c$177$2$2 ==.
                           1615 ;	apps/test_adc/test_adc.c:177: sendReportIfNeeded();
   03BF 12s00rBD           1616 	lcall	_sendReportIfNeeded
   03C2 80 F2              1617 	sjmp	00102$
                    03C4   1618 	C$test_adc.c$179$1$1 ==.
                    03C4   1619 	XG$main$0$0 ==.
   03C4 22                 1620 	ret
                           1621 	.area CSEG    (CODE)
                           1622 	.area CONST   (CODE)
                    0000   1623 G$param_input_mode$0$0 == .
   0000                    1624 _param_input_mode:
   0000 00 00 00 00        1625 	.byte #0x00,#0x00,#0x00,#0x00	;  0
                    0004   1626 G$param_bar_graph$0$0 == .
   0004                    1627 _param_bar_graph:
   0004 01 00 00 00        1628 	.byte #0x01,#0x00,#0x00,#0x00	;  1
                    0008   1629 G$param_report_period_ms$0$0 == .
   0008                    1630 _param_report_period_ms:
   0008 28 00 00 00        1631 	.byte #0x28,#0x00,#0x00,#0x00	;  40
                    000C   1632 Ftest_adc$_str_0$0$0 == .
   000C                    1633 __str_0:
   000C 25 2D 34 73 20 25  1634 	.ascii "%-4s %4d mV |"
        34 64 20 6D 56 20
        7C
   0019 00                 1635 	.db 0x00
                    001A   1636 Ftest_adc$_str_1$0$0 == .
   001A                    1637 __str_1:
   001A 1B                 1638 	.db 0x1B
   001B 5B 30 3B 30 48     1639 	.ascii "[0;0H"
   0020 00                 1640 	.db 0x00
                    0021   1641 Ftest_adc$_str_2$0$0 == .
   0021                    1642 __str_2:
   0021 50 30 5F 30        1643 	.ascii "P0_0"
   0025 00                 1644 	.db 0x00
                    0026   1645 Ftest_adc$_str_3$0$0 == .
   0026                    1646 __str_3:
   0026 50 30 5F 31        1647 	.ascii "P0_1"
   002A 00                 1648 	.db 0x00
                    002B   1649 Ftest_adc$_str_4$0$0 == .
   002B                    1650 __str_4:
   002B 50 30 5F 32        1651 	.ascii "P0_2"
   002F 00                 1652 	.db 0x00
                    0030   1653 Ftest_adc$_str_5$0$0 == .
   0030                    1654 __str_5:
   0030 50 30 5F 33        1655 	.ascii "P0_3"
   0034 00                 1656 	.db 0x00
                    0035   1657 Ftest_adc$_str_6$0$0 == .
   0035                    1658 __str_6:
   0035 50 30 5F 34        1659 	.ascii "P0_4"
   0039 00                 1660 	.db 0x00
                    003A   1661 Ftest_adc$_str_7$0$0 == .
   003A                    1662 __str_7:
   003A 50 30 5F 35        1663 	.ascii "P0_5"
   003E 00                 1664 	.db 0x00
                    003F   1665 Ftest_adc$_str_8$0$0 == .
   003F                    1666 __str_8:
   003F 56 44 44 20 20 25  1667 	.ascii "VDD  %4d mV"
        34 64 20 6D 56
   004A 00                 1668 	.db 0x00
                    004B   1669 Ftest_adc$_str_9$0$0 == .
   004B                    1670 __str_9:
   004B 25 34 64 2C 20 25  1671 	.ascii "%4d, %4d, %4d, %4d, %4d, %4d, %4d"
        34 64 2C 20 25 34
        64 2C 20 25 34 64
        2C 20 25 34 64 2C
        20 25 34 64 2C 20
        25 34 64
   006C 0D                 1672 	.db 0x0D
   006D 0A                 1673 	.db 0x0A
   006E 00                 1674 	.db 0x00
                           1675 	.area XINIT   (CODE)
                           1676 	.area CABS    (ABS,CODE)
